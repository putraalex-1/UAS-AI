{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPPhZNCenMoBpK/qD2qhmvr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/putraalex-1/UAS-AI/blob/main/%22Klasifikasi_Obesitas%22.EDA\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dNGXgPqeHcir"
      },
      "outputs": [],
      "source": [
        "# Klasifikasi Obesitas menggunakan KNN\n",
        "# Dibuat oleh: <ALEX SAPUTRA>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "J_azy7jVMP-Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/putraalex-1/UAS-AI.git"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eZ62FvVDHy9T",
        "outputId": "38c896db-6da0-4bd4-93af-f8aacfe85216"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'UAS-AI'...\n",
            "remote: Enumerating objects: 20, done.\u001b[K\n",
            "remote: Counting objects: 100% (20/20), done.\u001b[K\n",
            "remote: Compressing objects: 100% (16/16), done.\u001b[K\n",
            "remote: Total 20 (delta 3), reused 0 (delta 0), pack-reused 0 (from 0)\u001b[K\n",
            "Receiving objects: 100% (20/20), 7.98 KiB | 2.66 MiB/s, done.\n",
            "Resolving deltas: 100% (3/3), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# URL raw dari file dataset\n",
        "dataset_file = \"https://raw.githubusercontent.com/putraalex-1/UAS-AI/main/DATASET/Obesity%20Classification.csv\"\n",
        "data = pd.read_csv(dataset_file)\n"
      ],
      "metadata": {
        "id": "PLscM1KkTcxQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Menampilkan 5 baris pertama dari dataset\n",
        "print(data.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D7iz8LU2Txtt",
        "outputId": "0108fe5c-1aa9-4d6d-afd5-0b3452271ff7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   ID  Age  Gender  Height  Weight   BMI          Label\n",
            "0   1   25    Male     175      80  25.3  Normal Weight\n",
            "1   2   30  Female     160      60  22.5  Normal Weight\n",
            "2   3   35    Male     180      90  27.3     Overweight\n",
            "3   4   40  Female     150      50  20.0    Underweight\n",
            "4   5   45    Male     190     100  31.2          Obese\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menampilkan informasi dataset\n",
        "print(data.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tJ0F4-HaT3Fd",
        "outputId": "bf2c2d2b-b768-448e-9c52-fc5c72a1326f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 108 entries, 0 to 107\n",
            "Data columns (total 7 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   ID      108 non-null    int64  \n",
            " 1   Age     108 non-null    int64  \n",
            " 2   Gender  108 non-null    object \n",
            " 3   Height  108 non-null    int64  \n",
            " 4   Weight  108 non-null    int64  \n",
            " 5   BMI     108 non-null    float64\n",
            " 6   Label   108 non-null    object \n",
            "dtypes: float64(1), int64(4), object(2)\n",
            "memory usage: 6.0+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Memeriksa duplikat\n",
        "duplicates = data.duplicated().sum()\n",
        "print(f'Duplikat: {duplicates}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sWyGT2N-T_vA",
        "outputId": "3669a6d1-c8f6-4775-a804-3124b4998175"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Duplikat: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Memeriksa nilai kosong\n",
        "null_values = data.isnull().sum()\n",
        "print(f'Nilai Null:\\n{null_values}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0CP6f1-UFcE",
        "outputId": "b26052ac-e468-46f2-b875-86f7f181778a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nilai Null:\n",
            "ID        0\n",
            "Age       0\n",
            "Gender    0\n",
            "Height    0\n",
            "Weight    0\n",
            "BMI       0\n",
            "Label     0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Menghapus duplikat\n",
        "data = data.drop_duplicates()"
      ],
      "metadata": {
        "id": "SoArTkv7ULB1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghapus baris dengan nilai kosong\n",
        "data = data.dropna()"
      ],
      "metadata": {
        "id": "gN5sSGqKUSc9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Contoh visualisasi: Histogram dari kolom tertentu\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(data['Label'], bins=30)\n",
        "plt.title('Label')\n",
        "plt.xlabel('Nilai')\n",
        "plt.ylabel('Frekuensi')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "z_7IK1QFVGVP",
        "outputId": "4e1f64ab-639b-4e62-a9c6-43cf212fdb6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}